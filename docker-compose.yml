services:
  nginx:
    build:
      dockerfile: nginx.Dockerfile
      context: ./.docker/DockerFiles
    container_name: nginx
    working_dir: /var/www/html
    ports:
      - '${APP_PORT}:80'
    #   - '4000:80'
    volumes:
      - ./storage/logs/nginx:/var/log/nginx
      - ./:/var/www/html
      - ./.docker/config/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - myapp
    depends_on:
      - mysql
      - php

  php:
    build:
      dockerfile: Dockerfile
      context: .
    container_name: php
    restart: unless-stopped
    tty: true
    volumes:
      - ./:/var/www/html
      - ./storage/logs/php/php.log:/var/log/php-fpm.log
    networks:
      - myapp
    depends_on:
      - mysql
      - redis
      - laravel_echo_server

  mysql:
    build:
      dockerfile: mysql.Dockerfile
      context: ./.docker/DockerFiles
    container_name: mysql
    ports:
      - '3308:3306'
    volumes:
      - ./.docker/data/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    restart: unless-stopped
    networks:
      - myapp

  laravel_echo_server:
    build:
      context: .docker/laravel-echo-server
      dockerfile: Dockerfile
    container_name: laravel_echo_server
    volumes:
      - .env:/app/.env
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - myapp

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - '8025:8025'
      - '1025:1025'
    networks:
      - myapp

  redis:
    build:
      dockerfile: redis.Dockerfile
      context: ./.docker/DockerFiles
    container_name: redis
    # ports:
    # - '6379:6379'
    volumes:
      - ./.docker/data/redis:/data
    restart: unless-stopped
    networks:
      - myapp

  adminer:
    build:
      dockerfile: adminer.Dockerfile
      context: ./.docker/DockerFiles
    image: adminer
    restart: unless-stopped
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - mysql
    networks:
      - myapp

networks:
  myapp:
    driver: bridge
